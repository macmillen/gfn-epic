---
import { Image } from "astro:assets";
import { DateTime } from "luxon";
import type { Card } from "../types";
import { getSafeGameId } from "../utils/data";
import IconEpicGames from "./icons/icon-epic-games.svelte";
import IconGamepad from "./icons/icon-gamepad.svelte";
import IconNvidia from "./icons/icon-nvidia.svelte";
import LinkIcon from "./link-icon.svelte";
import TCell from "./t-cell.svelte";

export interface Props {
  data: Card[];
}

const { data } = Astro.props;
---

<div class="flex flex-col max-w-5xl mx-auto px-2 items-start">
  <table
    class="divide-y divide-gray-200 space-y-4 border-separate border-spacing-y-4 w-full"
  >
    <thead>
      <tr>
        <th></th>
        <th class="px-2 text-left">
          <span class="pr-3">Release</span>
        </th>
        <th class="px-2 text-left">
          <span class="sm:pr-5">Title</span>
        </th>
        <th class="px-2">
          <span class="sm:pr-5">Info</span>
        </th>
      </tr>
    </thead>
    <tbody>
      {
        data.map(
          ({
            fromDate: _fromDate,
            untilDate: _untilDate,
            title,
            gfnUrl,
            data: { id, cover, rating, websites = [], genres } = {},
          }) => {
            const fromDate = DateTime.fromISO(_fromDate);
            const fromDateStr = fromDate.toLocaleString(DateTime.DATE_MED);
            const untilDate = DateTime.fromISO(_untilDate);
            const untilDateStr = untilDate.toLocaleString(DateTime.DATE_MED);
            const epicWebsite = websites.find((v) => v.category === 16);
            return (
              <tr
                class="row group"
                data-fromdate={_fromDate}
                data-untildate={_untilDate}
                data-gameid={id}
                id={getSafeGameId(title, _fromDate)}
              >
                <TCell class="!p-0 w-0">
                  <div class="sm:w-[72px] sm:h-[96px] w-[45px] h-[60px]">
                    {cover ? (
                      <Image
                        alt=""
                        src={cover}
                        width={72}
                        height={96}
                        class="block"
                      />
                    ) : (
                      <div class="w-full h-full bg-zinc-600/40 flex items-center justify-center">
                        <IconGamepad class="w-12 h-12 text-zinc-500 -rotate-6 scale-125 sm:scale-[2]" />
                      </div>
                    )}
                  </div>
                </TCell>

                <TCell class="text-zinc-300 whitespace-nowrap w-0 sm:text-base text-xs pl-5">
                  <div>{fromDateStr}</div>
                  {fromDateStr !== untilDateStr && `- ${untilDateStr}`}
                  <div class="countdown text-red-500" />
                </TCell>

                <TCell class="sm:text-base text-xs w-full">
                  <span class="group-hover:text-green-400 transition duration-300 sm:ml-5">
                    {title}
                  </span>
                  {genres?.length && (
                    <div class="sm:inline-flex hidden gap-2 ml-4 items-center whitespace-nowrap w-0">
                      {genres.slice(0, 2).map((genre) => (
                        <div class="bg-zinc-800 rounded-full py-1 px-2 text-xs">
                          {genre}
                        </div>
                      ))}
                    </div>
                  )}
                </TCell>

                <TCell class="w-0 sm:rounded-none rounded-r-lg">
                  <div class="flex justify-end gap-2 items-center sm:mr-5">
                    <div class="flex justify-center">
                      <span
                        class={`${
                          rating ? "bg-green-500 text-zinc-800" : "bg-zinc-500"
                        } rating rounded-full sm:w-6 sm:h-6 w-5 h-5 flex justify-center items-center text-xs`}
                      >
                        {rating != null ? Math.round(rating) : "-"}
                      </span>
                    </div>

                    <LinkIcon url={epicWebsite?.url} icon={IconEpicGames} />
                    <LinkIcon
                      url={gfnUrl}
                      icon={IconNvidia}
                      class="text-green-500"
                    />
                  </div>
                </TCell>
              </tr>
            );
          }
        )
      }
    </tbody>
  </table>
</div>

<style>
  .free-now {
    @apply !bg-green-500/10;
  }
  .free-soon {
    @apply !bg-blue-500/5;
  }
  .row {
    @apply font-bold hover:brightness-125 hover:ring-0 bg-gradient-to-r bg-zinc-700/50;
  }
</style>
